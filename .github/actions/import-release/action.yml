name: Import snapshot
description: Imports a snapshot of the main iOS repo
inputs:
  tag:
    required: true
    description: A tag from the main iOS repo to import
  ignore-paths:
    required: false
    description: A list of paths not to import
    default: README.md
outputs:
  sha:
    description: The sha for the generated commit in this repo
    value: ${{ steps.import-code.outputs.sha }}

runs:
  using: composite
  steps:
    - name: Configure git
      id: configure-git
      shell: bash
      run: |
        git config user.name 'Branch SDK Team'
        git config user.email sdk-team@branch.io
    - name: Import code
      id: import-code
      shell: bash
      run: |
        # Always ignore ., .., .ios-repo, .github
        ignore_paths=". .. .git .github .ios-repo ${{ inputs.ignore-paths }}"

        # First remove everything in this repo
        for f in * .*
        do
          # https://stackoverflow.com/a/8063398
          [[ $ignore_paths =~(^|[[:space:]])$f($|[[:space:]]) ]] || git rm -fr $f
        done

        # Now copy in the entire iOS repo
        cd .ios-repo
        for f in * .*
        do
          # https://stackoverflow.com/a/8063398
          [[ $ignore_paths =~(^|[[:space:]])$f($|[[:space:]]) ]] || cp -r $f ..
        done
        cd -

        # Scrub out any binaries from early commits
        [[ -d carthage-files/output ]] && rm -fr carthage-files/output

        # Now ditch the local copy of the iOS repo
        rm -fr .ios-repo

        # Add everything again. This results in many unchanged files
        # and only records what's changed since the last commit (release).
        # This effectively squashes together all commits between releases.
        git add .
        git commit -a -m'[release] ${{ inputs.tag }}'
        git push

        echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
