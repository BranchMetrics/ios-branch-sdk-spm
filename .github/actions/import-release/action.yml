name: Import snapshot
description: Imports a snapshot of the main iOS repo
inputs:
  tag:
    required: true
    description: A tag from the main iOS repo to import
outputs:
  sha:
    description: The sha for the generated commit in this repo
    value: ${{ steps.import-code.outputs.sha }}

runs:
  using: composite
  steps:
    - name: Configure git
      id: configure-git
      shell: bash
      run: |
        git config user.name 'Branch SDK Team'
        git config user.email sdk-team@branch.io
    - name: Import code
      id: import-code
      shell: bash
      run: |
        # clear out the entire repo. * matches everything but .*
        git rm -fr *

        # cannot git rm -fr .* because of ., .., .git, .ios-spm
        # remove specific paths
        [[ -d .swiftpm ]] && git rm -fr .swiftpm
        [[ -f .cocoadocs ]] && git rm -f .cocoadocs
        [[ -f .gitignore ]] && git rm -f .gitignore

        # Now copy in the entire iOS repo
        cp -pR .ios-repo/* .ios-repo/.swift* .ios-repo/.cocoa* .

        # Scrub out any binaries from early commits
        [[ -d carthage-files/output ]] && rm -fr carthage-files/output

        # Now ditch the local copy of the iOS repo
        rm -fr .ios-repo

        # Undo any changes to README.md in this repo
        # (the original is nearly blank anyway)
        git reset HEAD README.md
        git checkout -- README.md

        # Add everything again. This results in many unchanged files
        # and only records what's changed since the last commit (release).
        # This effectively squashes together all commits between releases.
        git add .
        git commit -a -m'[release] ${{ inputs.tag }}'
        git push

        echo "::set-output name=sha::$(git rev-parse HEAD)"
